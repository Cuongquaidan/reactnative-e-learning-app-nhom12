import React, { useState, useRef } from "react";
import {
    View,
    Text,
    TouchableOpacity,
    FlatList,
    StyleSheet,
    Modal,
    Dimensions,
} from "react-native";
import { v4 as uuidv4 } from "uuid";
import "react-native-get-random-values";

const ChatbotComponent = () => {
    const [messages, setMessages] = useState([
        {
            id: "1",
            text: chatbotData[0].question,
            type: "bot",
            options: chatbotData[0].options,
        },
    ]);
    const [isVisible, setIsVisible] = useState(false); // Tr·∫°ng th√°i hi·ªÉn th·ªã chatbox
    const flatListRef = useRef(null); // Tham chi·∫øu FlatList

    const handleOptionSelect = (option) => {
        setMessages((prevMessages) => [
            ...prevMessages,
            { id: Date.now().toString(), text: option.text, type: "user" },
        ]);

        const nextQuestion = chatbotData.find(
            (item) => item.id === option.nextId
        );

        if (nextQuestion) {
            setMessages((prevMessages) => [
                ...prevMessages,
                {
                    id: Date.now().toString(),
                    text: nextQuestion.question,
                    type: "bot",
                    options: nextQuestion.options,
                },
            ]);
        }

        // ƒê·ª£i tin nh·∫Øn c·∫≠p nh·∫≠t xong v√† cu·ªôn ƒë·∫øn cu·ªëi
        setTimeout(() => {
            flatListRef.current?.scrollToEnd({ animated: true });
        }, 100); // ƒê·∫£m b·∫£o FlatList ƒë∆∞·ª£c render tr∆∞·ªõc khi cu·ªôn
    };

    const resetChat = () => {
        setMessages([
            {
                id: "1",
                text: chatbotData[0].question,
                type: "bot",
                options: chatbotData[0].options,
            },
        ]);
    };

    const renderMessage = ({ item }) => (
        <View
            style={[
                styles.messageContainer,
                item.type === "bot" ? styles.botMessage : styles.userMessage,
            ]}
        >
            <Text
                style={[
                    styles.messageText,
                    item.type === "user" && styles.userText,
                ]}
            >
                {item.text}
            </Text>
            {item.type === "bot" &&
                item.options &&
                item.options.map((option, index) => (
                    <TouchableOpacity
                        key={uuidv4()}
                        style={styles.optionButton}
                        onPress={() => handleOptionSelect(option)}
                    >
                        <Text style={styles.optionText}>{option.text}</Text>
                    </TouchableOpacity>
                ))}
        </View>
    );

    return (
        <View>
            {/* N√∫t n·ªïi ƒë·ªÉ m·ªü chatbox */}
            <TouchableOpacity
                style={styles.floatingButton}
                onPress={() => setIsVisible(true)}
            >
                <Text style={styles.floatingButtonText}>üí¨</Text>
            </TouchableOpacity>

            {/* Modal hi·ªÉn th·ªã chatbox */}
            <Modal
                visible={isVisible}
                animationType="slide"
                transparent={true}
                onRequestClose={() => setIsVisible(false)}
            >
                <View style={styles.modalContainer}>
                    <View style={styles.chatbox}>
                        <FlatList
                            ref={flatListRef} // Tham chi·∫øu FlatList
                            data={messages}
                            renderItem={renderMessage}
                            keyExtractor={(item) => uuidv4()}
                            contentContainerStyle={styles.chatContainer}
                        />
                        <View style={styles.buttonRow}>
                            <TouchableOpacity
                                style={styles.actionButton}
                                onPress={resetChat}
                            >
                                <Text style={styles.actionButtonText}>
                                    üîÑ Reset
                                </Text>
                            </TouchableOpacity>
                            <TouchableOpacity
                                style={styles.actionButton}
                                onPress={() => setIsVisible(false)}
                            >
                                <Text style={styles.actionButtonText}>
                                    ‚ùå Close
                                </Text>
                            </TouchableOpacity>
                        </View>
                    </View>
                </View>
            </Modal>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
    },
    floatingButton: {
        position: "absolute",
        bottom: 100,
        right: 30,
        backgroundColor: "#4CAF50",
        width: 60,
        height: 60,
        borderRadius: 30,
        justifyContent: "center",
        alignItems: "center",
        shadowColor: "#000",
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.3,
        shadowRadius: 3,
        elevation: 5,
    },
    floatingButtonText: {
        fontSize: 24,
        color: "#fff",
    },
    modalContainer: {
        flex: 1,
        justifyContent: "flex-end",
        backgroundColor: "rgba(0, 0, 0, 0.5)",
    },
    chatbox: {
        width: "100%",
        height: Dimensions.get("window").height * 0.7,
        backgroundColor: "#fff",
        borderTopLeftRadius: 20,
        borderTopRightRadius: 20,
        padding: 16,
    },
    chatContainer: {
        paddingBottom: 80,
    },
    messageContainer: {
        marginBottom: 16,
        padding: 12,
        borderRadius: 12,
        maxWidth: "80%",
    },
    botMessage: {
        backgroundColor: "#E8F5E9",
        alignSelf: "flex-start",
    },
    userMessage: {
        backgroundColor: "#4CAF50",
        alignSelf: "flex-end",
    },
    messageText: {
        fontSize: 16,
    },
    userText: {
        color: "#fff",
    },
    optionButton: {
        marginTop: 8,
        padding: 10,
        backgroundColor: "#4CAF50",
        borderRadius: 6,
    },
    optionText: {
        color: "#fff",
        fontWeight: "bold",
    },
    buttonRow: {
        flexDirection: "row",
        justifyContent: "space-between",
        marginTop: 10,
    },
    actionButton: {
        backgroundColor: "#FF5722",
        padding: 12,
        borderRadius: 6,
        flex: 0.45,
    },
    actionButtonText: {
        color: "#fff",
        textAlign: "center",
        fontWeight: "bold",
    },
});

export default ChatbotComponent;

const chatbotData = [
    {
        id: "1",
        question: "Ch√†o b·∫°n! B·∫°n c·∫ßn h·ªó tr·ª£ v·ªÅ ƒëi·ªÅu g√¨?",
        options: [
            { text: "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng", nextId: "2" },
            { text: "Th√¥ng tin v·ªÅ c√°ch ƒëƒÉng b√°n kh√≥a h·ªçc", nextId: "3" },
        ],
    },
    {
        id: "2",
        question: "B·∫°n c·∫ßn h∆∞·ªõng d·∫´n v·ªÅ t√≠nh nƒÉng n√†o trong ·ª©ng d·ª•ng?",
        options: [
            { text: "C√°ch th√™m v√†o gi·ªè h√†ng", nextId: "4" },
            { text: "C√°ch l∆∞u kh√≥a h·ªçc", nextId: "5" },
            { text: "T√¨m hi·ªÉu v·ªÅ overview kh√≥a h·ªçc", nextId: "6" },
            { text: "Chi ti·∫øt kh√≥a h·ªçc", nextId: "7" },
            { text: "Quay l·∫°i", nextId: "1" },
        ],
    },
    {
        id: "3",
        question:
            "Hi·ªán t·∫°i, h·ªá th·ªëng ch∆∞a h·ªó tr·ª£ ch·ª©c nƒÉng ƒëƒÉng b√°n kh√≥a h·ªçc d√†nh cho ng∆∞·ªùi d√πng ƒëƒÉng k√Ω. N·∫øu c√≥ thay ƒë·ªïi trong t∆∞∆°ng lai, ch√∫ng t√¥i s·∫Ω th√¥ng b√°o ƒë·∫øn b·∫°n. C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m!",
        options: [{ text: "Quay l·∫°i", nextId: "1" }],
    },
    {
        id: "4",
        question:
            "ƒê·ªÉ th√™m kh√≥a h·ªçc v√†o gi·ªè h√†ng, b·∫°n v√†o ph·∫ßn *Overview kh√≥a h·ªçc* v√† ch·ªçn n√∫t *Add to Cart*. Gi·ªè h√†ng c√≥ th·ªÉ ƒë∆∞·ª£c truy c·∫≠p t·ª´ trang *Home*.",
        options: [{ text: "Quay l·∫°i", nextId: "2" }],
    },
    {
        id: "5",
        question:
            "ƒê·ªÉ l∆∞u kh√≥a h·ªçc, b·∫°n ch·ªçn bi·ªÉu t∆∞·ª£ng l∆∞u ·ªü g√≥c tr√™n c·ªßa m·ªói kh√≥a h·ªçc. Nh·∫•n l·∫°i ƒë·ªÉ h·ªßy l∆∞u. C√°c kh√≥a h·ªçc ƒë√£ l∆∞u c√≥ th·ªÉ ƒë∆∞·ª£c xem ·ªü trang *Profile*.",
        options: [{ text: "Quay l·∫°i", nextId: "2" }],
    },
    {
        id: "6",
        question:
            "Ph·∫ßn *Overview* cung c·∫•p video m·∫´u gi√∫p b·∫°n ƒë√°nh gi√° kh√≥a h·ªçc c√≥ ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa m√¨nh hay kh√¥ng tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh mua.",
        options: [{ text: "Quay l·∫°i", nextId: "2" }],
    },
    {
        id: "7",
        question:
            "Khi xem chi ti·∫øt kh√≥a h·ªçc, b·∫°n s·∫Ω th·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß v·ªÅ n·ªôi dung, t√†i nguy√™n kh√≥a h·ªçc, v√† l·ª£i √≠ch nh∆∞ ƒë∆∞·ª£c gi√°o vi√™n h·ªó tr·ª£ s·ª≠a c√°c d·ª± √°n c·ªßa b·∫°n.",
        options: [{ text: "Quay l·∫°i", nextId: "2" }],
    },
];
